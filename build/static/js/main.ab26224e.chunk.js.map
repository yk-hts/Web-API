{"version":3,"sources":["App.js","index.js"],"names":["App","useState","data","setData","useEffect","fetch","then","response","json","Header","class","DrawGragh","d","console","log","item","items","judge","newData","i","length","Country","push","name","NewConfirmed","Confirmed_by_Yesterday","TotalConfirmed","map","convertData","Countries","display","_display","textPosition","float","today","Date","style","href","className","offset","getMonth","getDate","id","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","fill","render","document","querySelector"],"mappings":"sNAsIeA,EA3FH,WAAO,IAAD,EACQC,mBAAS,MADjB,mBACTC,EADS,KACHC,EADG,KAEhBC,qBAAU,WACRC,MAAM,sCACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACJ,GACLC,EAAQD,QAEX,IAEH,IAAMO,EAAS,WACb,OACE,6BACE,6BAASC,MAAM,gBACb,yBAAKA,MAAM,aACT,yBAAKA,MAAM,aACT,wBAAIA,MAAM,SAAV,2KAUNC,EAAY,WAChB,IAAIC,EAAI,GACI,MAARV,EACFW,QAAQC,IAAI,cAEZF,EA7Dc,SAACG,GAInB,IAHA,IAAIC,EAAQ,GACRC,GAAQ,EACNC,EAAU,GACPC,EAAI,EAAGA,EAAIJ,EAAKK,OAAS,EAAGD,IAC/BJ,EAAKI,GAAGE,QAAQ,KAAON,EAAKI,EAAI,GAAGE,QAAQ,KAC7CJ,GAAQ,GAGNA,EACFD,EAAMM,KAAK,CACTC,KAAMR,EAAKI,GAAGE,QACdG,aAAcT,EAAKI,GAAGK,aACtBC,uBAAwBV,EAAKI,GAAGO,eAAiBX,EAAKI,GAAGK,gBAG3DR,EAAMM,KAAK,CACTC,KAAMR,EAAKI,GAAGE,QACdG,aAAcT,EAAKI,GAAGK,aACtBC,uBAAwBV,EAAKI,GAAGO,eAAiBX,EAAKI,GAAGK,eAE3DN,EAAQI,KAAKN,GACbA,EAAQ,GACRC,GAAQ,GAIZ,OADAC,EAAQS,KAAI,SAACZ,GAAD,OAAUF,QAAQC,IAAIC,MAC3BG,EAkCCU,CAAY1B,EAAK2B,WAGvB,IAAMC,EAAU,CACdA,QAAQ,eACRC,SAAS,UAELC,EAAe,CACnBC,MAAQ,SAGNC,EAAQ,IAAIC,KAChB,OACE,6BACA,uBAAGC,MAAOJ,GAAV,uCAA8B,uBAAGK,KAAK,2BAAR,sBAA9B,gBACE,uBAAGC,UAAU,cAAb,oGACG1B,EAAEe,KAAI,SAACZ,GAAD,OACL,yBAAKqB,MAAON,EAASQ,UAAU,aAC7B,kBAAC,IAAD,CAAYD,KAAM,QAAUtB,EAAK,GAAGQ,KAAK,GAAIgB,OAAO,MACjDxB,EAAK,GAAGQ,KAAK,IAFlB,QAOF,uBAAGa,MAAOJ,GAAeE,EAAMM,WAAW,EAA1C,SAA8CN,EAAMO,UAApD,sBACD7B,EAAEe,KAAI,SAACZ,GAAD,OACL,yBAAK2B,GAAI,OAAS3B,EAAK,GAAGQ,KAAK,IAC7B,yBAAKe,UAAU,cAAcvB,EAAK,GAAGQ,KAAK,IAC1C,kBAAC,IAAD,CACEoB,MAAO,KACPC,OAAQ,IACR1C,KAAMa,EACN8B,OAAQ,CACNC,IAAK,GACLC,MAAO,GACPC,KAAM,GACNC,OAAQ,IAGV,kBAAC,IAAD,CAAeC,gBAAgB,QAC/B,kBAAC,IAAD,CAAOC,QAAQ,SACf,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAKA,QAAQ,yBAAyBC,KAAK,YAC3C,kBAAC,IAAD,CAAKD,QAAQ,eAAeC,KAAK,mBAQ7C,OACE,6BACE,kBAAC3C,EAAD,MACA,kBAACE,EAAD,Q,OC5HN0C,iBAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,e","file":"static/js/main.ab26224e.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport AnchorLink from \"react-anchor-link-smooth-scroll\";\r\n\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n} from \"recharts\";\r\n\r\nconst convertData = (item) => {\r\n  let items = [];\r\n  let judge = true;\r\n  const newData = [];\r\n  for (let i = 0; i < item.length - 1; i++) {\r\n    if (item[i].Country[0] !== item[i + 1].Country[0]) {\r\n      judge = false;\r\n    }\r\n\r\n    if (judge) {\r\n      items.push({\r\n        name: item[i].Country,\r\n        NewConfirmed: item[i].NewConfirmed,\r\n        Confirmed_by_Yesterday: item[i].TotalConfirmed - item[i].NewConfirmed,\r\n      });\r\n    } else {\r\n      items.push({\r\n        name: item[i].Country,\r\n        NewConfirmed: item[i].NewConfirmed,\r\n        Confirmed_by_Yesterday: item[i].TotalConfirmed - item[i].NewConfirmed,\r\n      });\r\n      newData.push(items);\r\n      items = [];\r\n      judge = true;\r\n    }\r\n  }\r\n  newData.map((item) => console.log(item));\r\n  return newData;\r\n};\r\n\r\nconst App = () => {\r\n  const [data, setData] = useState(null);\r\n  useEffect(() => {\r\n    fetch(\"https://api.covid19api.com/summary\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setData(data);\r\n      });\r\n  }, []);\r\n\r\n  const Header = () => {\r\n    return (\r\n      <div>\r\n        <section class=\"hero is-dark\">\r\n          <div class=\"hero-body\">\r\n            <div class=\"container\">\r\n              <h1 class=\"title\">\r\n                各国の今までのコロナウイルス感染者の合計と新規感染者数\r\n              </h1>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const DrawGragh = () => {\r\n    let d = [];\r\n    if (data == null) {\r\n      console.log(\"loading...\");\r\n    } else {\r\n      d = convertData(data.Countries);\r\n    }\r\n\r\n    const display = {\r\n      display:\"inline-block\",\r\n      _display:\"inline\"\r\n    }\r\n    const textPosition = {\r\n      float : \"right\"\r\n    }\r\n\r\n    let today = new Date()\r\n    return (\r\n      <div>\r\n      <p style={textPosition}>このデータは<a href=\"https://covid19api.com/\">こちら</a>より</p>\r\n        <p className=\"title is-4\">各国のアルファベットの先頭の文字</p>\r\n          {d.map((item) => (\r\n            <div style={display} className=\"is-size-5\">\r\n              <AnchorLink href={\"#link\" + item[0].name[0]} offset=\"50\">\r\n                {item[0].name[0]}\r\n              </AnchorLink>\r\n              /\r\n            </div>\r\n          ))}\r\n          <p style={textPosition}>{today.getMonth()+1}月{today.getDate()}日現在</p>\r\n        {d.map((item) => (\r\n          <div id={\"link\" + item[0].name[0]}>\r\n            <div className=\"title is-3\">{item[0].name[0]}</div>\r\n            <BarChart\r\n              width={1500}\r\n              height={300}\r\n              data={item}\r\n              margin={{\r\n                top: 20,\r\n                right: 30,\r\n                left: 20,\r\n                bottom: 5,\r\n              }}\r\n            >\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"name\" />\r\n              <YAxis />\r\n              <Tooltip />\r\n              <Legend />\r\n              <Bar dataKey=\"Confirmed_by_Yesterday\" fill=\"#8884d8\" />\r\n              <Bar dataKey=\"NewConfirmed\" fill=\"#82ca9d\" />\r\n            </BarChart>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <DrawGragh />\r\n    </div>\r\n  );\r\n};\r\nexport default App;\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nimport 'bulma/css/bulma.css'\r\n\r\nrender(<App />, document.querySelector(\"#content\"));"],"sourceRoot":""}